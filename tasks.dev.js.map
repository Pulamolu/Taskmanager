{"version":3,"sources":["tasks.js"],"names":["Task","require","getAllTasks","req","res","find","tasks","status","json","msg","createTask","create","body","task","getTask","findOne","_id","params","id","updateTask","findOneAndUpdate","runValidators","deleteTask","findOneAndDelete","module","exports"],"mappings":"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","sourcesContent":["const Task=require('../models/Tasks')\r\nconst getAllTasks=async(req,res)=>{\r\n    try{const tasks=await Task.find({})\r\n    res.status(200).json({tasks})}\r\n    catch(error){\r\n        res.status(500).json({msg:error})\r\n    }\r\n};\r\n\r\nconst createTask= async(req,res)=>{\r\n    try{\r\nconst task= await Task.create(req.body)\r\nres.status(200).json({task})}\r\ncatch(error){\r\n    res.status(500).json({msg:error})\r\n}\r\n};\r\nconst getTask=async(req,res)=>{\r\n    try{const tasks=await Task.findOne({_id:req.params.id})\r\n    if(!task){\r\n        return res.status(404).json({msg:'no matching id'})\r\n    }\r\n    res.status(200).json({task})\r\n}\r\n    catch(error){\r\n        res.status(500).json({msg:error})\r\n    }\r\n};\r\nconst updateTask=async(req,res)=>{\r\n    try{\r\n     const task= await Task.findOneAndUpdate({_id:req.params.id},req.body,{\r\n        new:true,\r\n        runValidators:true\r\n     })\r\n     if(!task){\r\n     res.status(200).json({task})\r\n     } \r\n    }\r\n     catch(error){\r\n        res.status(500).json({msg:error})\r\n     }\r\n};\r\nconst deleteTask=async(req,res)=>{\r\n        try{\r\n            const task=await Task.findOneAndDelete({_id:req.params.id})\r\n            if(!task){\r\n             return res.status(404).json({msg:'no matching found'})\r\n\r\n            }\r\n            res.status(200).json({task})\r\n        } catch(error){\r\n            res.status(500).json({msg:error})\r\n\r\n        }\r\n};\r\n\r\nmodule.exports={\r\n    getAllTasks,\r\n    createTask,\r\n    getTask,\r\n    updateTask,\r\n    deleteTask,\r\n};"],"file":"tasks.dev.js"}