{"version":3,"sources":["tasks.js"],"names":["Task","require","getAllTasks","req","res","tasks","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","t0","msg","stop","createTask","_task","_context2","create","body","task","findOne","_id","params","id","_context3","updateTask","_task2","_context4","findOneAndUpdate","new","runValidators","deleteTask","_task3","_context5","findOneAndDelete","abrupt","module","exports"],"mappings":"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","file":"tasks.min.js","sourcesContent":["const Task=require('../models/Tasks')\r\nconst getAllTasks=async(req,res)=>{\r\n    try{const tasks=await Task.find({})\r\n    res.status(200).json({tasks})}\r\n    catch(error){\r\n        res.status(500).json({msg:error})\r\n    }\r\n};\r\n\r\nconst createTask= async(req,res)=>{\r\n    try{\r\nconst task= await Task.create(req.body)\r\nres.status(200).json({task})}\r\ncatch(error){\r\n    res.status(500).json({msg:error})\r\n}\r\n};\r\nconst getTask=async(req,res)=>{\r\n    try{const tasks=await Task.findOne({_id:req.params.id})\r\n    if(!task){\r\n        return res.status(404).json({msg:'no matching id'})\r\n    }\r\n    res.status(200).json({task})\r\n}\r\n    catch(error){\r\n        res.status(500).json({msg:error})\r\n    }\r\n};\r\nconst updateTask=async(req,res)=>{\r\n    try{\r\n     const task= await Task.findOneAndUpdate({_id:req.params.id},req.body,{\r\n        new:true,\r\n        runValidators:true\r\n     })\r\n     if(!task){\r\n     res.status(200).json({task})\r\n     } \r\n    }\r\n     catch(error){\r\n        res.status(500).json({msg:error})\r\n     }\r\n};\r\nconst deleteTask=async(req,res)=>{\r\n        try{\r\n            const task=await Task.findOneAndDelete({_id:req.params.id})\r\n            if(!task){\r\n             return res.status(404).json({msg:'no matching found'})\r\n\r\n            }\r\n            res.status(200).json({task})\r\n        } catch(error){\r\n            res.status(500).json({msg:error})\r\n\r\n        }\r\n};\r\n\r\nmodule.exports={\r\n    getAllTasks,\r\n    createTask,\r\n    getTask,\r\n    updateTask,\r\n    deleteTask,\r\n};"]}